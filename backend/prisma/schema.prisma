// backend/prisma/schema.prisma - EKSIKSIZ VERSIYON (User.name field'ı ile)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum TriggerType {
  INACTIVITY
  EVENT
  SEGMENT_ENTRY
  SEGMENT_EXIT
  TIME_BASED
  DEPOSIT_THRESHOLD
  WITHDRAWAL_THRESHOLD
  LOGIN_STREAK
  LOSS_STREAK
  WIN_STREAK
  FIRST_DEPOSIT
  BIRTHDAY
  ACCOUNT_ANNIVERSARY
  LOW_BALANCE
  HIGH_BALANCE
  GAME_SPECIFIC
  BET_SIZE
  SESSION_DURATION
  MULTIPLE_FAILED_DEPOSITS
  RTP_THRESHOLD
  BONUS_EXPIRY
}

enum ActionType {
  SEND_TELEGRAM_MESSAGE
  SEND_EMAIL
  SEND_SMS
  SEND_PUSH_NOTIFICATION
  ADD_BONUS
  ADD_FREE_SPINS
  ADJUST_LOYALTY_POINTS
  CHANGE_VIP_TIER
  APPLY_CASHBACK
  SEND_IN_APP_MESSAGE
  TRIGGER_POPUP
  ADD_TO_SEGMENT
  REMOVE_FROM_SEGMENT
  FLAG_ACCOUNT
  CREATE_TASK
  WEBHOOK
  CUSTOM_JAVASCRIPT
}

// ============================================
// MODELS
// ============================================

model Customer {
  id                String   @id @default(cuid())
  name              String
  apiKey            String   @unique
  scriptId          String   @unique

  // Domain güvenliği için
  allowedDomains    String[]

  telegramBotToken  String?
  metaPixelId       String?
  metaAccessToken   String?
  googleAdsId       String?
  googleApiSecret   String?
  domConfig         Json?

  users             User[]
  events            Event[]
  segments          Segment[]
  rules             Rule[]
  ruleExecutions    RuleExecution[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  @@index([scriptId])
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  password   String
  role       String   @default("MEMBER")
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Event {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  apiKey     String
  sessionId  String
  playerId   String?
  eventName  String
  url        String
  parameters Json?
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  @@index([customerId, playerId])
  @@index([eventName])
  @@index([createdAt])
  @@index([customerId, playerId, eventName])
  @@index([customerId, eventName, createdAt])
  @@index([sessionId])
}

model Player {
  id                    Int                   @id @default(autoincrement())
  playerId              String
  email                 String?
  customerId            String
  telegramConnections   TelegramConnection[]

  @@unique([playerId, customerId])
  @@index([customerId, playerId])
}

model TelegramConnection {
  id             Int    @id @default(autoincrement())
  telegramChatId String
  playerId       Int
  player         Player @relation(fields: [playerId], references: [id])
  customerId     String

  @@unique([playerId])
}

model Segment {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  criteria    Json
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([customerId])
}

model Rule {
  id                    Int             @id @default(autoincrement())
  name                  String
  description           String?
  isActive              Boolean         @default(true)
  triggerType           TriggerType
  config                Json
  
  // Koşullar ve filtreler
  conditions            Json?
  
  // Sıklık kontrolü
  maxExecutionsPerPlayer Int?
  cooldownPeriodDays     Int?
  
  // Zamanlama
  startDate             DateTime?
  endDate               DateTime?
  activeHours           Json?
  activeDaysOfWeek      Json?
  
  // Öncelik
  priority              Int            @default(0)
  
  // A/B Test
  conversionGoalEvent   String?
  testingEnabled        Boolean        @default(false)
  
  // İstatistikler
  totalExecutions       Int            @default(0)
  totalConversions      Int            @default(0)
  lastExecutedAt        DateTime?
  
  customerId            String
  customer              Customer       @relation(fields: [customerId], references: [id])
  variants              RuleVariant[]
  
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  
  @@index([customerId, isActive])
  @@index([triggerType])
  @@index([priority])
}

model RuleVariant {
  id                    Int            @id @default(autoincrement())
  name                  String
  actionType            ActionType
  actionPayload         Json
  
  // A/B Test için ağırlık
  weight                Int            @default(1)
  
  // İstatistikler
  exposures             Int            @default(0)
  conversions           Int            @default(0)
  
  ruleId                Int
  rule                  Rule           @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
}

model RuleExecution {
  id                    Int            @id @default(autoincrement())
  ruleId                Int
  variantId             Int?
  playerId              String
  executedAt            DateTime       @default(now())
  success               Boolean        @default(true)
  errorMessage          String?
  
  customerId            String
  customer              Customer       @relation(fields: [customerId], references: [id])
  
  @@index([customerId, playerId])
  @@index([ruleId])
  @@index([executedAt])
}